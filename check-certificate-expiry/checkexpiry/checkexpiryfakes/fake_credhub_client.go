// Code generated by counterfeiter. DO NOT EDIT.
package checkexpiryfakes

import (
	sync "sync"

	credentials "code.cloudfoundry.org/credhub-cli/credhub/credentials"
	checkexpiry "github.com/cf-deployment-concourse-tasks/check-certificate-expiry/checkexpiry"
)

type FakeCredhubClient struct {
	FindByPartialNameStub        func(string) (credentials.FindResults, error)
	findByPartialNameMutex       sync.RWMutex
	findByPartialNameArgsForCall []struct {
		arg1 string
	}
	findByPartialNameReturns struct {
		result1 credentials.FindResults
		result2 error
	}
	findByPartialNameReturnsOnCall map[int]struct {
		result1 credentials.FindResults
		result2 error
	}
	GetLatestCertificateStub        func(string) (credentials.Certificate, error)
	getLatestCertificateMutex       sync.RWMutex
	getLatestCertificateArgsForCall []struct {
		arg1 string
	}
	getLatestCertificateReturns struct {
		result1 credentials.Certificate
		result2 error
	}
	getLatestCertificateReturnsOnCall map[int]struct {
		result1 credentials.Certificate
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubClient) FindByPartialName(arg1 string) (credentials.FindResults, error) {
	fake.findByPartialNameMutex.Lock()
	ret, specificReturn := fake.findByPartialNameReturnsOnCall[len(fake.findByPartialNameArgsForCall)]
	fake.findByPartialNameArgsForCall = append(fake.findByPartialNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByPartialName", []interface{}{arg1})
	fake.findByPartialNameMutex.Unlock()
	if fake.FindByPartialNameStub != nil {
		return fake.FindByPartialNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByPartialNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) FindByPartialNameCallCount() int {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	return len(fake.findByPartialNameArgsForCall)
}

func (fake *FakeCredhubClient) FindByPartialNameCalls(stub func(string) (credentials.FindResults, error)) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = stub
}

func (fake *FakeCredhubClient) FindByPartialNameArgsForCall(i int) string {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	argsForCall := fake.findByPartialNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) FindByPartialNameReturns(result1 credentials.FindResults, result2 error) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = nil
	fake.findByPartialNameReturns = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) FindByPartialNameReturnsOnCall(i int, result1 credentials.FindResults, result2 error) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = nil
	if fake.findByPartialNameReturnsOnCall == nil {
		fake.findByPartialNameReturnsOnCall = make(map[int]struct {
			result1 credentials.FindResults
			result2 error
		})
	}
	fake.findByPartialNameReturnsOnCall[i] = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestCertificate(arg1 string) (credentials.Certificate, error) {
	fake.getLatestCertificateMutex.Lock()
	ret, specificReturn := fake.getLatestCertificateReturnsOnCall[len(fake.getLatestCertificateArgsForCall)]
	fake.getLatestCertificateArgsForCall = append(fake.getLatestCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetLatestCertificate", []interface{}{arg1})
	fake.getLatestCertificateMutex.Unlock()
	if fake.GetLatestCertificateStub != nil {
		return fake.GetLatestCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLatestCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) GetLatestCertificateCallCount() int {
	fake.getLatestCertificateMutex.RLock()
	defer fake.getLatestCertificateMutex.RUnlock()
	return len(fake.getLatestCertificateArgsForCall)
}

func (fake *FakeCredhubClient) GetLatestCertificateCalls(stub func(string) (credentials.Certificate, error)) {
	fake.getLatestCertificateMutex.Lock()
	defer fake.getLatestCertificateMutex.Unlock()
	fake.GetLatestCertificateStub = stub
}

func (fake *FakeCredhubClient) GetLatestCertificateArgsForCall(i int) string {
	fake.getLatestCertificateMutex.RLock()
	defer fake.getLatestCertificateMutex.RUnlock()
	argsForCall := fake.getLatestCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) GetLatestCertificateReturns(result1 credentials.Certificate, result2 error) {
	fake.getLatestCertificateMutex.Lock()
	defer fake.getLatestCertificateMutex.Unlock()
	fake.GetLatestCertificateStub = nil
	fake.getLatestCertificateReturns = struct {
		result1 credentials.Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestCertificateReturnsOnCall(i int, result1 credentials.Certificate, result2 error) {
	fake.getLatestCertificateMutex.Lock()
	defer fake.getLatestCertificateMutex.Unlock()
	fake.GetLatestCertificateStub = nil
	if fake.getLatestCertificateReturnsOnCall == nil {
		fake.getLatestCertificateReturnsOnCall = make(map[int]struct {
			result1 credentials.Certificate
			result2 error
		})
	}
	fake.getLatestCertificateReturnsOnCall[i] = struct {
		result1 credentials.Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	fake.getLatestCertificateMutex.RLock()
	defer fake.getLatestCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ checkexpiry.CredhubClient = new(FakeCredhubClient)
